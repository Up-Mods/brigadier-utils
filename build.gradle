plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
}

def ENV = System.getenv()
def buildTime = ENV.BUILD_TIME ?: new Date().format('yyyyMMddHHmmss')

def javaVersion = 17;

group = "dev.upcraft"
archivesBaseName = "brigadier-utils"

version = ENV.TAG ?: "${buildTime}${ENV.BUILD_NUMBER ? "+build.${ENV.BUILD_NUMBER}" : "-SNAPSHOT"}"

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()

    maven {
        name = "Mojang"
        url = "https://libraries.minecraft.net"
    }
}

dependencies {
//    // This dependency is exported to consumers, that is to say found on their compile classpath.
//    api 'org.apache.commons:commons-math3:3.6.1'
//
//    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
//    implementation 'com.google.guava:guava:32.1.1-jre'

    implementation "com.mojang:brigadier:1.0.18"
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    withSourcesJar()
    withJavadocJar()
    toolchain {
        languageVersion = JavaLanguageVersion.of(javaVersion)
        vendor = JvmVendorSpec.MICROSOFT
    }
}

jar {
    from("LICENSE.md") {
        rename { "LICENSE_${archivesBaseName}.md" }
    }

    manifest.mainAttributes(
            "Implementation-Title": project.archivesBaseName,
            "Implementation-Version": project.version,
            "Maven-Artifact": "${project.group}:${project.archivesBaseName}:${project.version}".toLowerCase(Locale.ROOT),
            "Built-On-Java": "${System.getProperty("java.vm.version")} (${System.getProperty("java.vm.vendor")})"
    )
}

testing {
    suites {
        // Configure the built-in test suite
        test {
            // Use JUnit Jupiter test framework
            useJUnitJupiter('5.9.3')
        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    repositories {
        if (ENV.MAVEN_UPLOAD_URL) {
            maven {
                url = ENV.MAVEN_UPLOAD_URL
                credentials {
                    username = ENV.MAVEN_UPLOAD_USERNAME
                    password = ENV.MAVEN_UPLOAD_PASSWORD
                }
            }
        }
    }
}

signing {
    if (ENV.SIGNING_KEY) {
        useInMemoryPgpKeys(ENV.SIGNING_KEY_ID, ENV.SIGNING_KEY, ENV.SIGNING_KEY_PASSWORD)
        sign publishing.publications.mavenJava
        sign configurations.runtimeElements
    }
}
